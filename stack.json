{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template to create neccesary resources for the requester of VPC peer connection.",
  "Resources": {
    "PeerConnection": {
      "Type": "AWS::EC2::VPCPeeringConnection",
      "Properties": {
        "VpcId": {"Ref": "VpcId"},
        "PeerVpcId": {"Ref": "PeeringVpcId"},
        "PeerRegion": {"Ref": "PeeringRegion"},
        "PeerOwnerId": {"Ref": "PeeringAccountId"},
        "PeerRoleArn": {"Ref": "PeeringRoleArn"}
      }
    },
    "PeerRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "VpcPeeringConnectionId": {"Ref": "PeerConnection"},
        "DestinationCidrBlock": {"Ref": "PeeringCidrBlock"},
        "RouteTableId": {"Ref": "RouteTableId"}
      }
    },
    "LambdaPeeringRouteQueuePublisherExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["lambda.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"],
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "default",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["sqs:SendMessage"],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "LambdaPeeringRouteQueuePublisher": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Send accepter a SQS message after peering connection was requested.",
        "Code": { "ZipFile": { "Fn::Join": [ "\n", [
          "#!/usr/bin/env python",
          "",
          "from __future__ import print_function",
          "",
          "import json",
          "import boto3",
          "import cfnresponse",
          "",
          "print('Loading function')",
          "",
          "def lambda_handler(event, context):",
          "    print('Received event: ' + json.dumps(event))",
          "    try:",
          "        request_type = event['RequestType']",
          "        properties = event['ResourceProperties']",
          "        msg = {}",
          "        msg['request_type'] = request_type",
          "        msg['peer_requester_cidr'] = properties['CidrBlock']",
          "        msg['peer_connection_id'] = properties['PeerConnectionId']",
          "        response = {}",
          "        if request_type in ['Create', 'Delete']:",
          "            print('Sending SQS message to create peer route')",
          "            sqs = boto3.client('sqs', region_name=properties['Region'])",
          "            response = sqs.send_message(",
          "                QueueUrl=properties['PeeringSqsQueueUrl'],",
          "                MessageBody=json.dumps(msg)",
          "            )",
          "        elif request_type in ['Update']:",
          "            print('Nothing to do with {}, skipped.'.format(request_type))",
          "        else:",
          "            err = 'Unsupported request type: {0}'.format(request_type)",
          "            cfnresponse.send(event, context, cfnresponse.FAILED, {'error': err})",
          "            return",
          "    except Exception as e:",
          "        cfnresponse.send(event, context, cfnresponse.FAILED, {'error': str(e)})",
          "        return",
          "    cfnresponse.send(event, context, cfnresponse.SUCCESS, response)"
        ] ] } },
        "Handler": "index.lambda_handler",
        "Runtime": "python2.7",
        "Timeout": "15",
        "Role": {"Fn::GetAtt": ["LambdaPeeringRouteQueuePublisherExecutionRole", "Arn"]}
      }
    },
    "CustomResource": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["LambdaPeeringRouteQueuePublisher", "Arn"]},
        "PeeringSqsQueueUrl": {"Ref": "PeeringSqsQueueUrl"},
        "CidrBlock": {"Ref": "CidrBlock"},
        "PeerConnectionId": {"Ref": "PeerConnection"},
        "Region": {"Ref": "PeeringRegion"}
      }
    }
  },
  "Parameters": {
    "VpcId": {
      "Type": "String",
      "Default": "",
      "Description": "VPC ID of the VPC peer requester."
    },
    "CidrBlock": {
      "Type": "String",
      "Default": "10.0.0.0/16",
      "Description": "CIDR Block of the VPC peer requester.",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "RouteTableId": {
      "Type": "String",
      "Default": "",
      "Description": "Route Table ID of the VPC peer requester."
    },
    "PeeringVpcId": {
      "Type": "String",
      "Default": "",
      "Description": "VPC ID of the VPC peer accepter."
    },
    "PeeringRegion": {
      "Type": "String",
      "Default": "",
      "Description": "Region code of the VPC peer accepter."
    },
    "PeeringAccountId": {
      "Type": "String",
      "Default": "",
      "Description": "AWS Account ID of the owner of the VPC peer accepter."
    },
    "PeeringRoleArn": {
      "Type": "String",
      "Default": "",
      "Description": "Amazon Resource Name (ARN) of the VPC peer role of accepter."
    },
    "PeeringCidrBlock": {
      "Type": "String",
      "Default": "10.0.0.0/16",
      "Description": "CIDR Block of the VPC peer accepter.",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PeeringSqsQueueUrl": {
      "Type": "String",
      "Default": "",
      "Description": "SQS queue URL of the VPC peer accepter."
    }
  },
  "Outputs": {
    "PeerConnectionId": {
      "Value": {"Ref": "PeerConnection"}
    }
  }
}
