{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template to create neccesary resources for the requester of VPC peer connection.",
  "Resources": {
    "PeerConnection": {
      "Type": "AWS::EC2::VPCPeeringConnection",
      "Properties": {
        "VpcId": {
          "Ref": "PeerRequesterId"
        },
        "PeerVpcId": {
          "Ref": "PeerAccepterId"
        },
        "PeerRegion": {
          "Ref": "PeerAccepterRegion"
        },
        "PeerOwnerId": {
          "Ref": "PeerAccepterAccountId"
        },
        "PeerRoleArn": {
          "Ref": "PeerAccepterRoleArn"
        }
      }
    },
    "PeerRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "VpcPeeringConnectionId": {
          "Ref": "PeerConnection"
        },
        "DestinationCidrBlock": {
          "Ref": "PeerAccepterCidrBlock"
        },
        "RouteTableId": {
          "Ref": "PeerRequesterRouteTableId"
        }
      },
      "DependsOn": [
        "PeerConnection"
      ]
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
            "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          }
        ]
      }
    },
    "LambdaFunctionForPeerRoute": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": { "ZipFile": { "Fn::Join": [ "\n", [
          "import json",
          "import boto3",
          "import logging",
          "import cfnresponse",
          "logger = logging.getLogger()",
          "def send_sqs_msg(event, context):",
          "    logger.info('======')",
          "    logger.info(event)",
          "    logger.info('======')",
          "    try:",
          "        request_type = event['RequestType']",
          "        properties = event['ResourceProperties']",
          "        msg = {}",
          "        msg['request_type'] = request_type",
          "        msg['peering_requester_cidr'] = properties['PeerRequesterCidrBlock']",
          "        msg['peering_connection_id'] = properties['PeerConnectionId']",
          "        response = {}",
          "        if request_type == 'Create':",
          "            logger.info('Sending SQS message to create peer route')",
          "            sqs = boto3.client('sqs')",
          "            response = sqs.send_message(",
          "                QueueUrl=properties['PeerAccepterSqsQueueUrl'],",
          "                MessageBody=json.dumps(msg)",
          "            )",
          "        elif request_type in ['Delete', 'Update']:",
          "            logger.info('Nothing to do with {}, skipped.'.format(request_type))",
          "        else:",
          "            err = 'Unsupported request type: {0}'.format(request_type)",
          "            logger.error(err)",
          "            cfnresponse.send(event, context, cfnresponse.FAILED, {'error': err})",
          "    except Exception as e:",
          "        logger.error(e)",
          "        cfnresponse.send(event, context, cfnresponse.FAILED, {'error': str(e)})",
          "    cfnresponse.send(event, context, cfnresponse.SUCCESS, response)"
        ] ] } },
        "Handler": "index.send_sqs_msg",
        "Runtime": "python2.7",
        "Timeout": "15",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LambdaExecutionRole"
      ]
    },
    "CustomResource": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LambdaFunctionForPeerRoute",
            "Arn"
          ]
        },
        "PeerAccepterSqsQueueUrl": {
          "Ref": "PeerAccepterSqsQueueUrl"
        },
        "PeerRequesterCidrBlock": {
          "Ref": "PeerRequesterCidrBlock"
        },
        "PeerConnectionId": {
          "Ref": "PeerConnection"
        }
      },
      "DependsOn": [
        "LambdaFunctionForPeerRoute",
        "PeerConnection"
      ]
    }
  },
  "Parameters": {
    "NS": {
      "Type": "String",
      "Default": "Foo",
      "Description": "Enter a Name Space for Stack. Default is 'Foo'."
    },
    "NSLowerCase": {
      "Type": "String",
      "Default": "foo",
      "Description": "Lower case of value of NS. Default is 'foo'."
    },
    "PeerRequesterId": {
      "Type": "String",
      "Default": "",
      "Description": "VPC ID of the requester VPC."
    },
    "PeerRequesterCidrBlock": {
      "Type": "String",
      "Default": "10.0.0.0/16",
      "Description": "CIDR Block of the requester VPC.",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PeerRequesterRouteTableId": {
      "Type": "String",
      "Default": "",
      "Description": "Route Table ID of the owner of the requester VPC."
    },
    "PeerAccepterId": {
      "Type": "String",
      "Default": "",
      "Description": "VPC ID of the accepter VPC."
    },
    "PeerAccepterRegion": {
      "Type": "String",
      "Default": "",
      "Description": "Region code for the accepter VPC."
    },
    "PeerAccepterAccountId": {
      "Type": "String",
      "Default": "",
      "Description": "AWS Account ID of the owner of the accepter VPC."
    },
    "PeerAccepterRoleArn": {
      "Type": "String",
      "Default": "",
      "Description": "Amazon Resource Name (ARN) of the VPC peer role for the peering connection in another AWS account."
    },
    "PeerAccepterCidrBlock": {
      "Type": "String",
      "Default": "10.0.0.0/16",
      "Description": "CIDR Block of the accepter VPC.",
      "MinLength": "9",
      "MaxLength": "18",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PeerAccepterSqsQueueUrl": {
      "Type": "String",
      "Default": "",
      "Description": "AWS SQS quere URL of the accepter."
    }
  },
  "Outputs": {
    "PeerConnectionId": {
      "Value": {
        "Ref": "PeerConnection"
      }
    }
  }
}
